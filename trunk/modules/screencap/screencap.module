<?php
// $Id:

define('SCREENCAP_DEFAULT_IMAGENAME', 'slide.jpg');
define('SCREENCAP_DEFAULT_IMAGEWIDTH', 400);
define('SCREENCAP_DEFAULT_IMAGEHEIGHT', 300);


/**
* Valid permissions for this module
* @return array An array of valid permissions for the onthisdate module
*/
function screencap_perm() {
  return array('create screencap','edit own screencap');
} 

function screencap_access($op, $node, $account) {
  if ($op == 'create') {
    // Only users with permission to do so may create this node type.
    return user_access('create screencap', $account);
  }
	    
  // Users who create a node may edit or delete it later, assuming they have the
  // necessary permissions.
  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit own screencap', $account) && ($account->uid == $node->uid)) {
      return TRUE;
    }
  }
} 

function screencap_node_info() {
  return array('screencap' => array(
          'name' => t('Screencap'),
          'module' => 'screencap',
          'description' => t('Allow to use screencap images in your site'),
      )
    );
}

  
/**
 * Implementation of hook_block().
 * 
 */
function screencap_block($op = 'list', $delta = 0) {

  switch ($op) {
    case 'list':
      $block[0]['info'] = t('Screencap');
      return $block;
      break;
    
    case 'view':
      $block['subject'] = t('Screencap');
      $block['content'] = screencap_content();
    
      return $block;
      break;
  }
}

/**
 * Callback function to display content
 *
 * @return STRING
 */
function screencap_content($node) {

  $sourcedir = $node->sourcedir;
  $refreshtime = $node->refreshtime * 1000;
  $script = url('screencap-player/'.$node->nid);
  jquery_heartbeat_set($refreshtime, $sourcedir, $script);

  $output = '<div id="screencap-main">'.
  '<div class="screencap-content" id="'.$sourcedir.'"></div>'. 
  '</div>';

  return $output;
}

/**
 * Hook, displays the contents of the node form page for creating and editing nodes.
 *
 * @param $node
 *   object
 *
 * @return
 *   string value of form content
 */

function screencap_form($node) {
  $form = array();
  
  // default node stuff
  $type = node_get_types('type', $node);

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -20
  );

  $form['screencap'] = array('#type' => 'fieldset', '#title' => t('Screencap Settings'), '#weight' => 1);

    $basedir = file_create_path() . '/screencap';
    $baseimage = variable_get('screencap_default_imagename',SCREENCAP_DEFAULT_IMAGENAME);

    $form['screencap']['sourcedir'] = array(
      '#type' => 'textfield',
      '#title' => t('Screencap source dir'),
      '#size' => 11,
      '#required' => TRUE,
      '#maxlength' => 11,
      '#default_value' => $node->sourcedir,
      '#description' => t('Each new screencap image must be placed in this directory: {drupa install}/%basedir/{sourcedir}/%baseimage',array('%basedir' => $basedir,'%baseimage' => $baseimage))
    );  

    $form['screencap']['refreshtime'] = array(
      '#type' => 'textfield',
      '#title' => t('Refresh interval'),
      '#size' => 5,
      '#required' => TRUE,
      '#maxlength' => 5,
      '#default_value' => $node->refreshtime,
      '#description' => t('Interval between each screen refresh in seconds')
    );

    $form['screencap']['imagewidth'] = array(
      '#type' => 'textfield',
      '#title' => t('Screencap width'),
      '#size' => 5,
      '#required' => TRUE,
      '#maxlength' => 5,
      '#default_value' => $node->imagewidth,
      '#description' => t('Screencap max image width')
    );

    $form['screencap']['imageheight'] = array(
      '#type' => 'textfield',
      '#title' => t('Screencap height'),
      '#size' => 5,
      '#required' => TRUE,
      '#maxlength' => 5,
      '#default_value' => $node->imageheight,
      '#description' => t('Screencap max image height')
    );


  return $form;
}

/**
 * Implementation of hook_insert.
 * Create screencap record in the screencap table
 *
 * @return
 *   TRUE on success, FALSE on error
 */
function screencap_insert($node) {
  screencap_presave($node);
  db_query("INSERT INTO {screencap} (vid, nid, refreshtime, sourcedir, imagewidth, imageheight, transitioneffect, alwaysreload) VALUES (%d, %d, %d, '%s', %d, %d, %d, %d)", $node->vid, $node->nid, $node->refreshtime, $node->sourcedir, $node->imagewidth, $node->imageheight, $node->transitioneffect, $node->alwaysreload);
}
  
/**
 * Implementation of hook_menu().
 *
 * @param $may_cache
 *   boolean indicating whether cacheable menu items should be returned
 *
 * @return
 *   array of menu information
 */

function screencap_menu() {
  global $user;  
  $items = array();

  $items['screencap'] = array(
    'title' => 'screencap',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('screencap_page'),
    'access arguments' => array('access screencap'),
    'type' => MENU_SUGGESTED_ITEM);
      
  $items['admin/settings/screencap'] = array(
    'title' => 'Screencap',
    'description' => 'Configure different aspects of the screencap module and its plugins',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('screencap_settings_form'),
    'access arguments' => array('administer screencap'),
    'type' => MENU_NORMAL_ITEM);

  $items['screencap-image/%'] = array(
    'title' => 'Screencap Image',
    'page callback' => 'screencap_image',
    'page arguments' => array(1),
	'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);

  $items['screencap-player/%'] = array(
    'title' => 'Screencap Player',
    'page callback' => 'screencap_player',
    'page arguments' => array(1),
	'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);
      
  return $items;
}


/**
 * Settings Hook
 *
 * @return
 *   string of form content or error message
 */
function screencap_settings_form() {
  global $base_url;

  $form = array();
  
  $form['menu'] = array(
    '#type' => 'fieldset',
    '#title' => t('General behavior'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE
  );
  
  $form['menu']['screencap_default_imagename'] = array(
    '#type' => 'textfield',
    '#title' => t('Screencap image name'),
    '#default_value' => variable_get('screencap_default_imagename', 'slide.jpg'),
    '#required' => TRUE,
    '#description' => t('Default screencap image name used for reading.')
  );

  $form['menu']['screencap_default_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Debug mode'),
    '#default_value' => variable_get('screencap_default_debug', 0),
    '#description' => t('Toggle screencap debug mode (random images will be generated).')
  );

  return system_settings_form($form);
}


/**
 * Implementation of hook_load()
 *
 * @param $node
 *   object or boolean FALSE on error
 */
function screencap_load($node) {
  if (is_numeric($node->vid)) {
    $node = db_fetch_object(db_query("SELECT * FROM {screencap} WHERE vid = %d", $node->vid));
    return $node;
  } else {
    return false;
  }
}

/**
 * Hook update
 *
 * @return
 *   TRUE on success, FALSE on error
 */
function screencap_update($node) {
  if ($node->revision) { //If a new node revision is being added then insert a new row.
    return screencap_insert($node);
  }
  else {
    screencap_presave($node);    
    return db_query("UPDATE {screencap} SET refreshtime=%d, sourcedir='%s', imagewidth=%d, imageheight=%d, transitioneffect=%d, alwaysreload=%d WHERE vid = %d",
         $node->refreshtime, $node->sourcedir, $node->imagewidth, $node->imageheight, $node->transitioneffect, $node->alwaysreload, $node->vid);
  }
}

function screencap_presave(&$node) {
    //$node->imagewidth = 400;
    //$node->imageheight = 300;
    if (!$node->imagewidth)
	$node->imagewidth = SCREENCAP_DEFAULT_IMAGEWIDTH;

    if (!$node->imageheight)
	$node->imageheight = SCREENCAP_DEFAULT_IMAGEHEIGHT;
    
    $node->transitioneffect = 0;
    $node->alwaysreload = 1;
}

/**
 * Implementation of hook_delete
 */
function screencap_delete($node) {
    db_query("DELETE FROM {screencap} WHERE nid = %d", $node->nid);
}

/**
 * Implementation of hook_view().
 */

function screencap_view(&$node, $teaser = FALSE, $page = FALSE) {
  
  // include the screencap css file
  drupal_add_css(drupal_get_path('module', 'screencap').'/screencap.css');
  
  //Run the body through the standard filters.
  $node = node_prepare($node, $teaser); 
  //print_r($node);
  //exit;

  // theme the teaser
  $node->teaser = theme('screencap_teaser', $node, $teaser, $page);

  // if we are viewing the page, run the body through the theme
  
  if ($page) {
    $output = '';
    $node->content['screencap_player'] = array(
	'#value' => theme('screencap_player', $node), 
	'#weight' => -1
    );
  }
  return $node;
}

/**
 * Displays a Drupal page containing recently added screencap
 *
 * @return
 *   string HTML output
 */
/*
function screencap_page() {
    theme('screencap_player', NULL);
}*/


/**
 * Displays a Drupal page containing recently added screencap
 *
 * @return
 *   string HTML output
 */
/*
function theme_screencap_page() {
  $output = '';
  if (arg(1) != 'help') { //We are not reading help so output a list of recent screencap nodes.
    $result = pager_query(db_rewrite_sql("SELECT n.nid, n.created FROM {node} n WHERE n.type = 'screencap' AND n.status = 1 ORDER BY n.created DESC"), variable_get('default_nodes_main', 10));
    while ($node = db_fetch_object($result)) {
      $output .= node_view(node_load($node->nid), 1);
    }
    $output .= theme('pager', NULL, variable_get('default_nodes_main', 10));
    // adds feed icon and link
    drupal_add_link(array('rel' => 'alternate',
      'type' => 'application/rss+xml',
      'title' => variable_get('site_name', 'drupal') . ' ' . t('screencap'),
      'href' => url('screencap/feed/')));

    $output .= '<br />' . theme('feed_icon', url('screencap/feed'), t('Syndicate'));
  }
  return $output;
}
*/

/**
 * Implementation of hook_theme().
 */
function screencap_theme() {
  return array(
    'screencap_page' => array(
      'arguments' => array(),
    ),
    'screencap_player' => array(
      'arguments' => array('node' => NULL),
    ),
    'screencap_view' => array(
      'arguments' => array('node' => NULL,'teaser' => NULL,'page' => NULL),
    ),
  );
}

function theme_screencap_player($node) {
  return screencap_content($node); 
}

function screencap_image($nid) {
  drupal_set_header('Expires: 0');
  drupal_set_header('Pragma: no-cache');
  drupal_set_header('Cache-Control: no-cache,no-store,max-age=0,s-maxage=0,must-revalidate');

  if (is_numeric($nid) && $node = node_load($nid) and $node->type == 'screencap') {
    $basefile = file_create_path() . '/screencap/' . $node->sourcedir . '/' . variable_get('screencap_default_imagename',SCREENCAP_DEFAULT_IMAGENAME);
    $info = image_get_info($basefile);
    if ($info) {
      $img = file_get_contents($basefile);
      drupal_set_header('Content-type: ' . $info['mime_type']);
      print $img;
    } else {
      print 'error';
    }
  }
}

function _screencap_random_image($file,$width,$height) {
    $im = imagecreate($width, $height) or die("Cannot Initialize new GD image stream");
    imagecolorallocate($im, rand(0,255), rand(0,255), rand(0,255));
    $text_color = imagecolorallocate($im, rand(0,255), rand(0,255), rand(0,255));
    imagestring($im, 3, 30, 50,  "Screencap Test - " . date('d/m/Y - H:i:s'), $text_color);
    drupal_set_header('Content-type: image/jpeg');
    imagejpeg($im,$file);
    imagedestroy($im);
}

function screencap_player($nid) {
  $output = '';   
  if (is_numeric($nid) && $node = node_load($nid) and $node->type == 'screencap') {    
    $basedir = file_create_path() . '/screencap/' . $node->sourcedir;
    if (file_check_directory($basedir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
      $basefile =  $basedir . '/' . variable_get('screencap_default_imagename',SCREENCAP_DEFAULT_IMAGENAME);

      /* debug */
      if (variable_get('screencap_default_debug', 0))
        _screencap_random_image($basefile,$node->imagewidth,$node->imageheight);

      $info = image_get_info($basefile);
      if ($info) {
        $image_url = url('screencap-image/' . $node->nid . '/' . mktime());
        $output = '<img class="screencap" width="'.(($node->imagewidth === 0) ? $info['width'] : $node->imagewidth).'" height="'.(($node->imageheight === 0) ? $info['height'] : $node->imageheight).'" src="'.$image_url.'" border="0">';

        /* debug */
        //if (variable_get('screencap_default_debug', 0))
	  //$output .= '<div class="data">'. date('Y-m-d H:i:s') .'</div>';
      } else {
        print 'error';
      }
    } else {
	print 'error';
    }
  }
  print $output;
}

